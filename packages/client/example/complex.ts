// Code generated by @bangumi/client/scripts/build.mjs, DO NOT EDIT IT.

/* eslint-disable @typescript-eslint/naming-convention */
/* eslint-disable @typescript-eslint/consistent-type-assertions */
/* eslint-disable @typescript-eslint/restrict-template-expressions */
import { ApiError } from '../error';
import type { operations } from '../types';
import type { ApiResponse } from '../types/utils';
import { buildURL, response } from '../utils';

type M = 'getSubjectTopicsById';

interface Param {
  subject_id: number;
}

interface Query {
  limit?: number;
  offset?: number;
}

interface SWRKey {
  op: M;
  param: Param;
  query: Query;
}

type Res =
  | ApiResponse<200, operations[M]['responses'][200]['content']['application/json']>
  | ApiResponse<400, operations[M]['responses'][400]['content']['application/json']>
  | ApiResponse<404, operations[M]['responses'][404]['content']['application/json']>;

type ResX = ApiResponse<200, operations[M]['responses'][200]['content']['application/json']>;

export async function execute({ subject_id }: Param, query?: Query): Promise<Res> {
  const res = await fetch(buildURL(`/p/subjects/${subject_id}/topics`, query), {
    method: 'get',
    credentials: 'same-origin',
  });

  return (await response(res)) as Res;
}

/**
 * method throw error when 'res.ok' is false
 */
export async function executeX({ subject_id }: Param, query?: Query): Promise<ResX['data']> {
  const res = await execute({ subject_id }, query);
  if (res.ok) {
    return res.data;
  }

  throw new ApiError(res);
}

export function swrKey(param: Param, query: Query): SWRKey {
  return {
    op: 'getSubjectTopicsById',
    param,
    query,
  };
}

export async function fetcher({ param, query }: SWRKey): Promise<ResX['data']> {
  return executeX(param, query);
}
